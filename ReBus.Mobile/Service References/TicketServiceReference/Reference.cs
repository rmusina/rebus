//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace ReBus.Mobile.TicketServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountWebServiceModel", Namespace="http://schemas.datacontract.org/2004/07/ReBus.WebServices.WebServiceModel")]
    public partial class AccountWebServiceModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal CreditField;
        
        private string FirstNameField;
        
        private System.Guid GUIDField;
        
        private string LastNameField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Credit {
            get {
                return this.CreditField;
            }
            set {
                if ((this.CreditField.Equals(value) != true)) {
                    this.CreditField = value;
                    this.RaisePropertyChanged("Credit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((this.GUIDField.Equals(value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusWebServiceModel", Namespace="http://schemas.datacontract.org/2004/07/ReBus.WebServices.WebServiceModel")]
    public partial class BusWebServiceModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid GUIDField;
        
        private ReBus.Mobile.TicketServiceReference.LineWebServiceModel LineField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((this.GUIDField.Equals(value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ReBus.Mobile.TicketServiceReference.LineWebServiceModel Line {
            get {
                return this.LineField;
            }
            set {
                if ((object.ReferenceEquals(this.LineField, value) != true)) {
                    this.LineField = value;
                    this.RaisePropertyChanged("Line");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LineWebServiceModel", Namespace="http://schemas.datacontract.org/2004/07/ReBus.WebServices.WebServiceModel")]
    public partial class LineWebServiceModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid GUIDField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((this.GUIDField.Equals(value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TicketWebServiceModel", Namespace="http://schemas.datacontract.org/2004/07/ReBus.WebServices.WebServiceModel")]
    public partial class TicketWebServiceModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ReBus.Mobile.TicketServiceReference.AccountWebServiceModel AccountField;
        
        private ReBus.Mobile.TicketServiceReference.BusWebServiceModel BusField;
        
        private System.DateTime CreatedField;
        
        private System.Guid GUIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ReBus.Mobile.TicketServiceReference.AccountWebServiceModel Account {
            get {
                return this.AccountField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountField, value) != true)) {
                    this.AccountField = value;
                    this.RaisePropertyChanged("Account");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ReBus.Mobile.TicketServiceReference.BusWebServiceModel Bus {
            get {
                return this.BusField;
            }
            set {
                if ((object.ReferenceEquals(this.BusField, value) != true)) {
                    this.BusField = value;
                    this.RaisePropertyChanged("Bus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((this.GUIDField.Equals(value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TicketServiceReference.ITicketWebService")]
    public interface ITicketWebService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITicketWebService/BuyTicket", ReplyAction="http://tempuri.org/ITicketWebService/BuyTicketResponse")]
        System.IAsyncResult BeginBuyTicket(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, ReBus.Mobile.TicketServiceReference.BusWebServiceModel bus, System.AsyncCallback callback, object asyncState);
        
        ReBus.Mobile.TicketServiceReference.TicketWebServiceModel EndBuyTicket(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITicketWebService/GetActiveTicket", ReplyAction="http://tempuri.org/ITicketWebService/GetActiveTicketResponse")]
        System.IAsyncResult BeginGetActiveTicket(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState);
        
        ReBus.Mobile.TicketServiceReference.TicketWebServiceModel EndGetActiveTicket(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITicketWebService/GetHistory", ReplyAction="http://tempuri.org/ITicketWebService/GetHistoryResponse")]
        System.IAsyncResult BeginGetHistory(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> EndGetHistory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITicketWebService/GetHistoryWithLimit", ReplyAction="http://tempuri.org/ITicketWebService/GetHistoryWithLimitResponse")]
        System.IAsyncResult BeginGetHistoryWithLimit(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, int limit, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> EndGetHistoryWithLimit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITicketWebService/GetNextHistoryWithLimit", ReplyAction="http://tempuri.org/ITicketWebService/GetNextHistoryWithLimitResponse")]
        System.IAsyncResult BeginGetNextHistoryWithLimit(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.DateTime before, int limit, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> EndGetNextHistoryWithLimit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITicketWebService/GetNewTickets", ReplyAction="http://tempuri.org/ITicketWebService/GetNewTicketsResponse")]
        System.IAsyncResult BeginGetNewTickets(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.DateTime after, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> EndGetNewTickets(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicketWebServiceChannel : ReBus.Mobile.TicketServiceReference.ITicketWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BuyTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BuyTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ReBus.Mobile.TicketServiceReference.TicketWebServiceModel Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ReBus.Mobile.TicketServiceReference.TicketWebServiceModel)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetActiveTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetActiveTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ReBus.Mobile.TicketServiceReference.TicketWebServiceModel Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ReBus.Mobile.TicketServiceReference.TicketWebServiceModel)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistoryWithLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoryWithLimitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNextHistoryWithLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNextHistoryWithLimitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNewTicketsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNewTicketsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicketWebServiceClient : System.ServiceModel.ClientBase<ReBus.Mobile.TicketServiceReference.ITicketWebService>, ReBus.Mobile.TicketServiceReference.ITicketWebService {
        
        private BeginOperationDelegate onBeginBuyTicketDelegate;
        
        private EndOperationDelegate onEndBuyTicketDelegate;
        
        private System.Threading.SendOrPostCallback onBuyTicketCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetActiveTicketDelegate;
        
        private EndOperationDelegate onEndGetActiveTicketDelegate;
        
        private System.Threading.SendOrPostCallback onGetActiveTicketCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistoryDelegate;
        
        private EndOperationDelegate onEndGetHistoryDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistoryWithLimitDelegate;
        
        private EndOperationDelegate onEndGetHistoryWithLimitDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoryWithLimitCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNextHistoryWithLimitDelegate;
        
        private EndOperationDelegate onEndGetNextHistoryWithLimitDelegate;
        
        private System.Threading.SendOrPostCallback onGetNextHistoryWithLimitCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNewTicketsDelegate;
        
        private EndOperationDelegate onEndGetNewTicketsDelegate;
        
        private System.Threading.SendOrPostCallback onGetNewTicketsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TicketWebServiceClient() {
        }
        
        public TicketWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TicketWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<BuyTicketCompletedEventArgs> BuyTicketCompleted;
        
        public event System.EventHandler<GetActiveTicketCompletedEventArgs> GetActiveTicketCompleted;
        
        public event System.EventHandler<GetHistoryCompletedEventArgs> GetHistoryCompleted;
        
        public event System.EventHandler<GetHistoryWithLimitCompletedEventArgs> GetHistoryWithLimitCompleted;
        
        public event System.EventHandler<GetNextHistoryWithLimitCompletedEventArgs> GetNextHistoryWithLimitCompleted;
        
        public event System.EventHandler<GetNewTicketsCompletedEventArgs> GetNewTicketsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.TicketServiceReference.ITicketWebService.BeginBuyTicket(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, ReBus.Mobile.TicketServiceReference.BusWebServiceModel bus, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuyTicket(account, bus, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ReBus.Mobile.TicketServiceReference.TicketWebServiceModel ReBus.Mobile.TicketServiceReference.ITicketWebService.EndBuyTicket(System.IAsyncResult result) {
            return base.Channel.EndBuyTicket(result);
        }
        
        private System.IAsyncResult OnBeginBuyTicket(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.TicketServiceReference.AccountWebServiceModel)(inValues[0]));
            ReBus.Mobile.TicketServiceReference.BusWebServiceModel bus = ((ReBus.Mobile.TicketServiceReference.BusWebServiceModel)(inValues[1]));
            return ((ReBus.Mobile.TicketServiceReference.ITicketWebService)(this)).BeginBuyTicket(account, bus, callback, asyncState);
        }
        
        private object[] OnEndBuyTicket(System.IAsyncResult result) {
            ReBus.Mobile.TicketServiceReference.TicketWebServiceModel retVal = ((ReBus.Mobile.TicketServiceReference.ITicketWebService)(this)).EndBuyTicket(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuyTicketCompleted(object state) {
            if ((this.BuyTicketCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BuyTicketCompleted(this, new BuyTicketCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BuyTicketAsync(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, ReBus.Mobile.TicketServiceReference.BusWebServiceModel bus) {
            this.BuyTicketAsync(account, bus, null);
        }
        
        public void BuyTicketAsync(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, ReBus.Mobile.TicketServiceReference.BusWebServiceModel bus, object userState) {
            if ((this.onBeginBuyTicketDelegate == null)) {
                this.onBeginBuyTicketDelegate = new BeginOperationDelegate(this.OnBeginBuyTicket);
            }
            if ((this.onEndBuyTicketDelegate == null)) {
                this.onEndBuyTicketDelegate = new EndOperationDelegate(this.OnEndBuyTicket);
            }
            if ((this.onBuyTicketCompletedDelegate == null)) {
                this.onBuyTicketCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuyTicketCompleted);
            }
            base.InvokeAsync(this.onBeginBuyTicketDelegate, new object[] {
                        account,
                        bus}, this.onEndBuyTicketDelegate, this.onBuyTicketCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.TicketServiceReference.ITicketWebService.BeginGetActiveTicket(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetActiveTicket(account, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ReBus.Mobile.TicketServiceReference.TicketWebServiceModel ReBus.Mobile.TicketServiceReference.ITicketWebService.EndGetActiveTicket(System.IAsyncResult result) {
            return base.Channel.EndGetActiveTicket(result);
        }
        
        private System.IAsyncResult OnBeginGetActiveTicket(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.TicketServiceReference.AccountWebServiceModel)(inValues[0]));
            return ((ReBus.Mobile.TicketServiceReference.ITicketWebService)(this)).BeginGetActiveTicket(account, callback, asyncState);
        }
        
        private object[] OnEndGetActiveTicket(System.IAsyncResult result) {
            ReBus.Mobile.TicketServiceReference.TicketWebServiceModel retVal = ((ReBus.Mobile.TicketServiceReference.ITicketWebService)(this)).EndGetActiveTicket(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetActiveTicketCompleted(object state) {
            if ((this.GetActiveTicketCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetActiveTicketCompleted(this, new GetActiveTicketCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetActiveTicketAsync(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account) {
            this.GetActiveTicketAsync(account, null);
        }
        
        public void GetActiveTicketAsync(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, object userState) {
            if ((this.onBeginGetActiveTicketDelegate == null)) {
                this.onBeginGetActiveTicketDelegate = new BeginOperationDelegate(this.OnBeginGetActiveTicket);
            }
            if ((this.onEndGetActiveTicketDelegate == null)) {
                this.onEndGetActiveTicketDelegate = new EndOperationDelegate(this.OnEndGetActiveTicket);
            }
            if ((this.onGetActiveTicketCompletedDelegate == null)) {
                this.onGetActiveTicketCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActiveTicketCompleted);
            }
            base.InvokeAsync(this.onBeginGetActiveTicketDelegate, new object[] {
                        account}, this.onEndGetActiveTicketDelegate, this.onGetActiveTicketCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.TicketServiceReference.ITicketWebService.BeginGetHistory(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistory(account, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> ReBus.Mobile.TicketServiceReference.ITicketWebService.EndGetHistory(System.IAsyncResult result) {
            return base.Channel.EndGetHistory(result);
        }
        
        private System.IAsyncResult OnBeginGetHistory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.TicketServiceReference.AccountWebServiceModel)(inValues[0]));
            return ((ReBus.Mobile.TicketServiceReference.ITicketWebService)(this)).BeginGetHistory(account, callback, asyncState);
        }
        
        private object[] OnEndGetHistory(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> retVal = ((ReBus.Mobile.TicketServiceReference.ITicketWebService)(this)).EndGetHistory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoryCompleted(object state) {
            if ((this.GetHistoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoryCompleted(this, new GetHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoryAsync(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account) {
            this.GetHistoryAsync(account, null);
        }
        
        public void GetHistoryAsync(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, object userState) {
            if ((this.onBeginGetHistoryDelegate == null)) {
                this.onBeginGetHistoryDelegate = new BeginOperationDelegate(this.OnBeginGetHistory);
            }
            if ((this.onEndGetHistoryDelegate == null)) {
                this.onEndGetHistoryDelegate = new EndOperationDelegate(this.OnEndGetHistory);
            }
            if ((this.onGetHistoryCompletedDelegate == null)) {
                this.onGetHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoryCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoryDelegate, new object[] {
                        account}, this.onEndGetHistoryDelegate, this.onGetHistoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.TicketServiceReference.ITicketWebService.BeginGetHistoryWithLimit(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, int limit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistoryWithLimit(account, limit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> ReBus.Mobile.TicketServiceReference.ITicketWebService.EndGetHistoryWithLimit(System.IAsyncResult result) {
            return base.Channel.EndGetHistoryWithLimit(result);
        }
        
        private System.IAsyncResult OnBeginGetHistoryWithLimit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.TicketServiceReference.AccountWebServiceModel)(inValues[0]));
            int limit = ((int)(inValues[1]));
            return ((ReBus.Mobile.TicketServiceReference.ITicketWebService)(this)).BeginGetHistoryWithLimit(account, limit, callback, asyncState);
        }
        
        private object[] OnEndGetHistoryWithLimit(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> retVal = ((ReBus.Mobile.TicketServiceReference.ITicketWebService)(this)).EndGetHistoryWithLimit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoryWithLimitCompleted(object state) {
            if ((this.GetHistoryWithLimitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoryWithLimitCompleted(this, new GetHistoryWithLimitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoryWithLimitAsync(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, int limit) {
            this.GetHistoryWithLimitAsync(account, limit, null);
        }
        
        public void GetHistoryWithLimitAsync(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, int limit, object userState) {
            if ((this.onBeginGetHistoryWithLimitDelegate == null)) {
                this.onBeginGetHistoryWithLimitDelegate = new BeginOperationDelegate(this.OnBeginGetHistoryWithLimit);
            }
            if ((this.onEndGetHistoryWithLimitDelegate == null)) {
                this.onEndGetHistoryWithLimitDelegate = new EndOperationDelegate(this.OnEndGetHistoryWithLimit);
            }
            if ((this.onGetHistoryWithLimitCompletedDelegate == null)) {
                this.onGetHistoryWithLimitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoryWithLimitCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoryWithLimitDelegate, new object[] {
                        account,
                        limit}, this.onEndGetHistoryWithLimitDelegate, this.onGetHistoryWithLimitCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.TicketServiceReference.ITicketWebService.BeginGetNextHistoryWithLimit(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.DateTime before, int limit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNextHistoryWithLimit(account, before, limit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> ReBus.Mobile.TicketServiceReference.ITicketWebService.EndGetNextHistoryWithLimit(System.IAsyncResult result) {
            return base.Channel.EndGetNextHistoryWithLimit(result);
        }
        
        private System.IAsyncResult OnBeginGetNextHistoryWithLimit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.TicketServiceReference.AccountWebServiceModel)(inValues[0]));
            System.DateTime before = ((System.DateTime)(inValues[1]));
            int limit = ((int)(inValues[2]));
            return ((ReBus.Mobile.TicketServiceReference.ITicketWebService)(this)).BeginGetNextHistoryWithLimit(account, before, limit, callback, asyncState);
        }
        
        private object[] OnEndGetNextHistoryWithLimit(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> retVal = ((ReBus.Mobile.TicketServiceReference.ITicketWebService)(this)).EndGetNextHistoryWithLimit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNextHistoryWithLimitCompleted(object state) {
            if ((this.GetNextHistoryWithLimitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNextHistoryWithLimitCompleted(this, new GetNextHistoryWithLimitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNextHistoryWithLimitAsync(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.DateTime before, int limit) {
            this.GetNextHistoryWithLimitAsync(account, before, limit, null);
        }
        
        public void GetNextHistoryWithLimitAsync(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.DateTime before, int limit, object userState) {
            if ((this.onBeginGetNextHistoryWithLimitDelegate == null)) {
                this.onBeginGetNextHistoryWithLimitDelegate = new BeginOperationDelegate(this.OnBeginGetNextHistoryWithLimit);
            }
            if ((this.onEndGetNextHistoryWithLimitDelegate == null)) {
                this.onEndGetNextHistoryWithLimitDelegate = new EndOperationDelegate(this.OnEndGetNextHistoryWithLimit);
            }
            if ((this.onGetNextHistoryWithLimitCompletedDelegate == null)) {
                this.onGetNextHistoryWithLimitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNextHistoryWithLimitCompleted);
            }
            base.InvokeAsync(this.onBeginGetNextHistoryWithLimitDelegate, new object[] {
                        account,
                        before,
                        limit}, this.onEndGetNextHistoryWithLimitDelegate, this.onGetNextHistoryWithLimitCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.TicketServiceReference.ITicketWebService.BeginGetNewTickets(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.DateTime after, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNewTickets(account, after, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> ReBus.Mobile.TicketServiceReference.ITicketWebService.EndGetNewTickets(System.IAsyncResult result) {
            return base.Channel.EndGetNewTickets(result);
        }
        
        private System.IAsyncResult OnBeginGetNewTickets(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.TicketServiceReference.AccountWebServiceModel)(inValues[0]));
            System.DateTime after = ((System.DateTime)(inValues[1]));
            return ((ReBus.Mobile.TicketServiceReference.ITicketWebService)(this)).BeginGetNewTickets(account, after, callback, asyncState);
        }
        
        private object[] OnEndGetNewTickets(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> retVal = ((ReBus.Mobile.TicketServiceReference.ITicketWebService)(this)).EndGetNewTickets(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNewTicketsCompleted(object state) {
            if ((this.GetNewTicketsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNewTicketsCompleted(this, new GetNewTicketsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNewTicketsAsync(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.DateTime after) {
            this.GetNewTicketsAsync(account, after, null);
        }
        
        public void GetNewTicketsAsync(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.DateTime after, object userState) {
            if ((this.onBeginGetNewTicketsDelegate == null)) {
                this.onBeginGetNewTicketsDelegate = new BeginOperationDelegate(this.OnBeginGetNewTickets);
            }
            if ((this.onEndGetNewTicketsDelegate == null)) {
                this.onEndGetNewTicketsDelegate = new EndOperationDelegate(this.OnEndGetNewTickets);
            }
            if ((this.onGetNewTicketsCompletedDelegate == null)) {
                this.onGetNewTicketsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNewTicketsCompleted);
            }
            base.InvokeAsync(this.onBeginGetNewTicketsDelegate, new object[] {
                        account,
                        after}, this.onEndGetNewTicketsDelegate, this.onGetNewTicketsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ReBus.Mobile.TicketServiceReference.ITicketWebService CreateChannel() {
            return new TicketWebServiceClientChannel(this);
        }
        
        private class TicketWebServiceClientChannel : ChannelBase<ReBus.Mobile.TicketServiceReference.ITicketWebService>, ReBus.Mobile.TicketServiceReference.ITicketWebService {
            
            public TicketWebServiceClientChannel(System.ServiceModel.ClientBase<ReBus.Mobile.TicketServiceReference.ITicketWebService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginBuyTicket(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, ReBus.Mobile.TicketServiceReference.BusWebServiceModel bus, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = account;
                _args[1] = bus;
                System.IAsyncResult _result = base.BeginInvoke("BuyTicket", _args, callback, asyncState);
                return _result;
            }
            
            public ReBus.Mobile.TicketServiceReference.TicketWebServiceModel EndBuyTicket(System.IAsyncResult result) {
                object[] _args = new object[0];
                ReBus.Mobile.TicketServiceReference.TicketWebServiceModel _result = ((ReBus.Mobile.TicketServiceReference.TicketWebServiceModel)(base.EndInvoke("BuyTicket", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetActiveTicket(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = account;
                System.IAsyncResult _result = base.BeginInvoke("GetActiveTicket", _args, callback, asyncState);
                return _result;
            }
            
            public ReBus.Mobile.TicketServiceReference.TicketWebServiceModel EndGetActiveTicket(System.IAsyncResult result) {
                object[] _args = new object[0];
                ReBus.Mobile.TicketServiceReference.TicketWebServiceModel _result = ((ReBus.Mobile.TicketServiceReference.TicketWebServiceModel)(base.EndInvoke("GetActiveTicket", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistory(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = account;
                System.IAsyncResult _result = base.BeginInvoke("GetHistory", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> EndGetHistory(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> _result = ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel>)(base.EndInvoke("GetHistory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistoryWithLimit(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, int limit, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = account;
                _args[1] = limit;
                System.IAsyncResult _result = base.BeginInvoke("GetHistoryWithLimit", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> EndGetHistoryWithLimit(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> _result = ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel>)(base.EndInvoke("GetHistoryWithLimit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNextHistoryWithLimit(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.DateTime before, int limit, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = account;
                _args[1] = before;
                _args[2] = limit;
                System.IAsyncResult _result = base.BeginInvoke("GetNextHistoryWithLimit", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> EndGetNextHistoryWithLimit(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> _result = ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel>)(base.EndInvoke("GetNextHistoryWithLimit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNewTickets(ReBus.Mobile.TicketServiceReference.AccountWebServiceModel account, System.DateTime after, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = account;
                _args[1] = after;
                System.IAsyncResult _result = base.BeginInvoke("GetNewTickets", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> EndGetNewTickets(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel> _result = ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.TicketServiceReference.TicketWebServiceModel>)(base.EndInvoke("GetNewTickets", _args, result)));
                return _result;
            }
        }
    }
}
