//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace ReBus.Mobile.SubscriptionServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountWebServiceModel", Namespace="http://schemas.datacontract.org/2004/07/ReBus.WebServices.WebServiceModel")]
    public partial class AccountWebServiceModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal CreditField;
        
        private string FirstNameField;
        
        private System.Guid GUIDField;
        
        private string LastNameField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Credit {
            get {
                return this.CreditField;
            }
            set {
                if ((this.CreditField.Equals(value) != true)) {
                    this.CreditField = value;
                    this.RaisePropertyChanged("Credit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((this.GUIDField.Equals(value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubscriptionWebServiceModel", Namespace="http://schemas.datacontract.org/2004/07/ReBus.WebServices.WebServiceModel")]
    public partial class SubscriptionWebServiceModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel AccountField;
        
        private System.DateTime CreatedField;
        
        private System.DateTime EndField;
        
        private System.Guid GUIDField;
        
        private System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> LinesField;
        
        private System.DateTime StartField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel Account {
            get {
                return this.AccountField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountField, value) != true)) {
                    this.AccountField = value;
                    this.RaisePropertyChanged("Account");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((this.GUIDField.Equals(value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> Lines {
            get {
                return this.LinesField;
            }
            set {
                if ((object.ReferenceEquals(this.LinesField, value) != true)) {
                    this.LinesField = value;
                    this.RaisePropertyChanged("Lines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LineWebServiceModel", Namespace="http://schemas.datacontract.org/2004/07/ReBus.WebServices.WebServiceModel")]
    public partial class LineWebServiceModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid GUIDField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((this.GUIDField.Equals(value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusWebServiceModel", Namespace="http://schemas.datacontract.org/2004/07/ReBus.WebServices.WebServiceModel")]
    public partial class BusWebServiceModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid GUIDField;
        
        private ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel LineField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((this.GUIDField.Equals(value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel Line {
            get {
                return this.LineField;
            }
            set {
                if ((object.ReferenceEquals(this.LineField, value) != true)) {
                    this.LineField = value;
                    this.RaisePropertyChanged("Line");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SubscriptionServiceReference.ISubscriptionWebService")]
    public interface ISubscriptionWebService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionWebService/BuySubscriptionForAllLines", ReplyAction="http://tempuri.org/ISubscriptionWebService/BuySubscriptionForAllLinesResponse")]
        System.IAsyncResult BeginBuySubscriptionForAllLines(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState);
        
        ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel EndBuySubscriptionForAllLines(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionWebService/BuySubscriptionForAllLinesWithStartDat" +
            "e", ReplyAction="http://tempuri.org/ISubscriptionWebService/BuySubscriptionForAllLinesWithStartDat" +
            "eResponse")]
        System.IAsyncResult BeginBuySubscriptionForAllLinesWithStartDate(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime startDate, System.AsyncCallback callback, object asyncState);
        
        ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel EndBuySubscriptionForAllLinesWithStartDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionWebService/BuySubscription", ReplyAction="http://tempuri.org/ISubscriptionWebService/BuySubscriptionResponse")]
        System.IAsyncResult BeginBuySubscription(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> lines, System.AsyncCallback callback, object asyncState);
        
        ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel EndBuySubscription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionWebService/BuySubscriptionWithStartDate", ReplyAction="http://tempuri.org/ISubscriptionWebService/BuySubscriptionWithStartDateResponse")]
        System.IAsyncResult BeginBuySubscriptionWithStartDate(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> lines, System.DateTime startDate, System.AsyncCallback callback, object asyncState);
        
        ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel EndBuySubscriptionWithStartDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionWebService/RenewSubscription", ReplyAction="http://tempuri.org/ISubscriptionWebService/RenewSubscriptionResponse")]
        System.IAsyncResult BeginRenewSubscription(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, System.AsyncCallback callback, object asyncState);
        
        ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel EndRenewSubscription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionWebService/RenewSubscriptionWithStartDate", ReplyAction="http://tempuri.org/ISubscriptionWebService/RenewSubscriptionWithStartDateResponse" +
            "")]
        System.IAsyncResult BeginRenewSubscriptionWithStartDate(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, System.DateTime startDate, System.AsyncCallback callback, object asyncState);
        
        ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel EndRenewSubscriptionWithStartDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionWebService/GetActiveSubscriptins", ReplyAction="http://tempuri.org/ISubscriptionWebService/GetActiveSubscriptinsResponse")]
        System.IAsyncResult BeginGetActiveSubscriptins(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> EndGetActiveSubscriptins(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionWebService/GetHistory", ReplyAction="http://tempuri.org/ISubscriptionWebService/GetHistoryResponse")]
        System.IAsyncResult BeginGetHistory(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> EndGetHistory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionWebService/GetHistoryWithLimit", ReplyAction="http://tempuri.org/ISubscriptionWebService/GetHistoryWithLimitResponse")]
        System.IAsyncResult BeginGetHistoryWithLimit(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, int limit, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> EndGetHistoryWithLimit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionWebService/GetNextHistoryWithLimit", ReplyAction="http://tempuri.org/ISubscriptionWebService/GetNextHistoryWithLimitResponse")]
        System.IAsyncResult BeginGetNextHistoryWithLimit(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime before, int limit, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> EndGetNextHistoryWithLimit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionWebService/GetNewSubscriptions", ReplyAction="http://tempuri.org/ISubscriptionWebService/GetNewSubscriptionsResponse")]
        System.IAsyncResult BeginGetNewSubscriptions(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime after, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> EndGetNewSubscriptions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionWebService/ValidateSubscription", ReplyAction="http://tempuri.org/ISubscriptionWebService/ValidateSubscriptionResponse")]
        System.IAsyncResult BeginValidateSubscription(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, ReBus.Mobile.SubscriptionServiceReference.BusWebServiceModel bus, System.AsyncCallback callback, object asyncState);
        
        int EndValidateSubscription(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISubscriptionWebServiceChannel : ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BuySubscriptionForAllLinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BuySubscriptionForAllLinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BuySubscriptionForAllLinesWithStartDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BuySubscriptionForAllLinesWithStartDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BuySubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BuySubscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BuySubscriptionWithStartDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BuySubscriptionWithStartDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RenewSubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RenewSubscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RenewSubscriptionWithStartDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RenewSubscriptionWithStartDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetActiveSubscriptinsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetActiveSubscriptinsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistoryWithLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoryWithLimitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNextHistoryWithLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNextHistoryWithLimitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNewSubscriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNewSubscriptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateSubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateSubscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscriptionWebServiceClient : System.ServiceModel.ClientBase<ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService>, ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService {
        
        private BeginOperationDelegate onBeginBuySubscriptionForAllLinesDelegate;
        
        private EndOperationDelegate onEndBuySubscriptionForAllLinesDelegate;
        
        private System.Threading.SendOrPostCallback onBuySubscriptionForAllLinesCompletedDelegate;
        
        private BeginOperationDelegate onBeginBuySubscriptionForAllLinesWithStartDateDelegate;
        
        private EndOperationDelegate onEndBuySubscriptionForAllLinesWithStartDateDelegate;
        
        private System.Threading.SendOrPostCallback onBuySubscriptionForAllLinesWithStartDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginBuySubscriptionDelegate;
        
        private EndOperationDelegate onEndBuySubscriptionDelegate;
        
        private System.Threading.SendOrPostCallback onBuySubscriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginBuySubscriptionWithStartDateDelegate;
        
        private EndOperationDelegate onEndBuySubscriptionWithStartDateDelegate;
        
        private System.Threading.SendOrPostCallback onBuySubscriptionWithStartDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRenewSubscriptionDelegate;
        
        private EndOperationDelegate onEndRenewSubscriptionDelegate;
        
        private System.Threading.SendOrPostCallback onRenewSubscriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginRenewSubscriptionWithStartDateDelegate;
        
        private EndOperationDelegate onEndRenewSubscriptionWithStartDateDelegate;
        
        private System.Threading.SendOrPostCallback onRenewSubscriptionWithStartDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetActiveSubscriptinsDelegate;
        
        private EndOperationDelegate onEndGetActiveSubscriptinsDelegate;
        
        private System.Threading.SendOrPostCallback onGetActiveSubscriptinsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistoryDelegate;
        
        private EndOperationDelegate onEndGetHistoryDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistoryWithLimitDelegate;
        
        private EndOperationDelegate onEndGetHistoryWithLimitDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoryWithLimitCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNextHistoryWithLimitDelegate;
        
        private EndOperationDelegate onEndGetNextHistoryWithLimitDelegate;
        
        private System.Threading.SendOrPostCallback onGetNextHistoryWithLimitCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNewSubscriptionsDelegate;
        
        private EndOperationDelegate onEndGetNewSubscriptionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetNewSubscriptionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateSubscriptionDelegate;
        
        private EndOperationDelegate onEndValidateSubscriptionDelegate;
        
        private System.Threading.SendOrPostCallback onValidateSubscriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SubscriptionWebServiceClient() {
        }
        
        public SubscriptionWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SubscriptionWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SubscriptionWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SubscriptionWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<BuySubscriptionForAllLinesCompletedEventArgs> BuySubscriptionForAllLinesCompleted;
        
        public event System.EventHandler<BuySubscriptionForAllLinesWithStartDateCompletedEventArgs> BuySubscriptionForAllLinesWithStartDateCompleted;
        
        public event System.EventHandler<BuySubscriptionCompletedEventArgs> BuySubscriptionCompleted;
        
        public event System.EventHandler<BuySubscriptionWithStartDateCompletedEventArgs> BuySubscriptionWithStartDateCompleted;
        
        public event System.EventHandler<RenewSubscriptionCompletedEventArgs> RenewSubscriptionCompleted;
        
        public event System.EventHandler<RenewSubscriptionWithStartDateCompletedEventArgs> RenewSubscriptionWithStartDateCompleted;
        
        public event System.EventHandler<GetActiveSubscriptinsCompletedEventArgs> GetActiveSubscriptinsCompleted;
        
        public event System.EventHandler<GetHistoryCompletedEventArgs> GetHistoryCompleted;
        
        public event System.EventHandler<GetHistoryWithLimitCompletedEventArgs> GetHistoryWithLimitCompleted;
        
        public event System.EventHandler<GetNextHistoryWithLimitCompletedEventArgs> GetNextHistoryWithLimitCompleted;
        
        public event System.EventHandler<GetNewSubscriptionsCompletedEventArgs> GetNewSubscriptionsCompleted;
        
        public event System.EventHandler<ValidateSubscriptionCompletedEventArgs> ValidateSubscriptionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.BeginBuySubscriptionForAllLines(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuySubscriptionForAllLines(account, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.EndBuySubscriptionForAllLines(System.IAsyncResult result) {
            return base.Channel.EndBuySubscriptionForAllLines(result);
        }
        
        private System.IAsyncResult OnBeginBuySubscriptionForAllLines(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel)(inValues[0]));
            return ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).BeginBuySubscriptionForAllLines(account, callback, asyncState);
        }
        
        private object[] OnEndBuySubscriptionForAllLines(System.IAsyncResult result) {
            ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel retVal = ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).EndBuySubscriptionForAllLines(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuySubscriptionForAllLinesCompleted(object state) {
            if ((this.BuySubscriptionForAllLinesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BuySubscriptionForAllLinesCompleted(this, new BuySubscriptionForAllLinesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BuySubscriptionForAllLinesAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account) {
            this.BuySubscriptionForAllLinesAsync(account, null);
        }
        
        public void BuySubscriptionForAllLinesAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, object userState) {
            if ((this.onBeginBuySubscriptionForAllLinesDelegate == null)) {
                this.onBeginBuySubscriptionForAllLinesDelegate = new BeginOperationDelegate(this.OnBeginBuySubscriptionForAllLines);
            }
            if ((this.onEndBuySubscriptionForAllLinesDelegate == null)) {
                this.onEndBuySubscriptionForAllLinesDelegate = new EndOperationDelegate(this.OnEndBuySubscriptionForAllLines);
            }
            if ((this.onBuySubscriptionForAllLinesCompletedDelegate == null)) {
                this.onBuySubscriptionForAllLinesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuySubscriptionForAllLinesCompleted);
            }
            base.InvokeAsync(this.onBeginBuySubscriptionForAllLinesDelegate, new object[] {
                        account}, this.onEndBuySubscriptionForAllLinesDelegate, this.onBuySubscriptionForAllLinesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.BeginBuySubscriptionForAllLinesWithStartDate(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime startDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuySubscriptionForAllLinesWithStartDate(account, startDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.EndBuySubscriptionForAllLinesWithStartDate(System.IAsyncResult result) {
            return base.Channel.EndBuySubscriptionForAllLinesWithStartDate(result);
        }
        
        private System.IAsyncResult OnBeginBuySubscriptionForAllLinesWithStartDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel)(inValues[0]));
            System.DateTime startDate = ((System.DateTime)(inValues[1]));
            return ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).BeginBuySubscriptionForAllLinesWithStartDate(account, startDate, callback, asyncState);
        }
        
        private object[] OnEndBuySubscriptionForAllLinesWithStartDate(System.IAsyncResult result) {
            ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel retVal = ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).EndBuySubscriptionForAllLinesWithStartDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuySubscriptionForAllLinesWithStartDateCompleted(object state) {
            if ((this.BuySubscriptionForAllLinesWithStartDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BuySubscriptionForAllLinesWithStartDateCompleted(this, new BuySubscriptionForAllLinesWithStartDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BuySubscriptionForAllLinesWithStartDateAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime startDate) {
            this.BuySubscriptionForAllLinesWithStartDateAsync(account, startDate, null);
        }
        
        public void BuySubscriptionForAllLinesWithStartDateAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime startDate, object userState) {
            if ((this.onBeginBuySubscriptionForAllLinesWithStartDateDelegate == null)) {
                this.onBeginBuySubscriptionForAllLinesWithStartDateDelegate = new BeginOperationDelegate(this.OnBeginBuySubscriptionForAllLinesWithStartDate);
            }
            if ((this.onEndBuySubscriptionForAllLinesWithStartDateDelegate == null)) {
                this.onEndBuySubscriptionForAllLinesWithStartDateDelegate = new EndOperationDelegate(this.OnEndBuySubscriptionForAllLinesWithStartDate);
            }
            if ((this.onBuySubscriptionForAllLinesWithStartDateCompletedDelegate == null)) {
                this.onBuySubscriptionForAllLinesWithStartDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuySubscriptionForAllLinesWithStartDateCompleted);
            }
            base.InvokeAsync(this.onBeginBuySubscriptionForAllLinesWithStartDateDelegate, new object[] {
                        account,
                        startDate}, this.onEndBuySubscriptionForAllLinesWithStartDateDelegate, this.onBuySubscriptionForAllLinesWithStartDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.BeginBuySubscription(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> lines, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuySubscription(account, lines, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.EndBuySubscription(System.IAsyncResult result) {
            return base.Channel.EndBuySubscription(result);
        }
        
        private System.IAsyncResult OnBeginBuySubscription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel)(inValues[0]));
            System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> lines = ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel>)(inValues[1]));
            return ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).BeginBuySubscription(account, lines, callback, asyncState);
        }
        
        private object[] OnEndBuySubscription(System.IAsyncResult result) {
            ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel retVal = ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).EndBuySubscription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuySubscriptionCompleted(object state) {
            if ((this.BuySubscriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BuySubscriptionCompleted(this, new BuySubscriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BuySubscriptionAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> lines) {
            this.BuySubscriptionAsync(account, lines, null);
        }
        
        public void BuySubscriptionAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> lines, object userState) {
            if ((this.onBeginBuySubscriptionDelegate == null)) {
                this.onBeginBuySubscriptionDelegate = new BeginOperationDelegate(this.OnBeginBuySubscription);
            }
            if ((this.onEndBuySubscriptionDelegate == null)) {
                this.onEndBuySubscriptionDelegate = new EndOperationDelegate(this.OnEndBuySubscription);
            }
            if ((this.onBuySubscriptionCompletedDelegate == null)) {
                this.onBuySubscriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuySubscriptionCompleted);
            }
            base.InvokeAsync(this.onBeginBuySubscriptionDelegate, new object[] {
                        account,
                        lines}, this.onEndBuySubscriptionDelegate, this.onBuySubscriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.BeginBuySubscriptionWithStartDate(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> lines, System.DateTime startDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuySubscriptionWithStartDate(account, lines, startDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.EndBuySubscriptionWithStartDate(System.IAsyncResult result) {
            return base.Channel.EndBuySubscriptionWithStartDate(result);
        }
        
        private System.IAsyncResult OnBeginBuySubscriptionWithStartDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel)(inValues[0]));
            System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> lines = ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel>)(inValues[1]));
            System.DateTime startDate = ((System.DateTime)(inValues[2]));
            return ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).BeginBuySubscriptionWithStartDate(account, lines, startDate, callback, asyncState);
        }
        
        private object[] OnEndBuySubscriptionWithStartDate(System.IAsyncResult result) {
            ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel retVal = ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).EndBuySubscriptionWithStartDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuySubscriptionWithStartDateCompleted(object state) {
            if ((this.BuySubscriptionWithStartDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BuySubscriptionWithStartDateCompleted(this, new BuySubscriptionWithStartDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BuySubscriptionWithStartDateAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> lines, System.DateTime startDate) {
            this.BuySubscriptionWithStartDateAsync(account, lines, startDate, null);
        }
        
        public void BuySubscriptionWithStartDateAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> lines, System.DateTime startDate, object userState) {
            if ((this.onBeginBuySubscriptionWithStartDateDelegate == null)) {
                this.onBeginBuySubscriptionWithStartDateDelegate = new BeginOperationDelegate(this.OnBeginBuySubscriptionWithStartDate);
            }
            if ((this.onEndBuySubscriptionWithStartDateDelegate == null)) {
                this.onEndBuySubscriptionWithStartDateDelegate = new EndOperationDelegate(this.OnEndBuySubscriptionWithStartDate);
            }
            if ((this.onBuySubscriptionWithStartDateCompletedDelegate == null)) {
                this.onBuySubscriptionWithStartDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuySubscriptionWithStartDateCompleted);
            }
            base.InvokeAsync(this.onBeginBuySubscriptionWithStartDateDelegate, new object[] {
                        account,
                        lines,
                        startDate}, this.onEndBuySubscriptionWithStartDateDelegate, this.onBuySubscriptionWithStartDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.BeginRenewSubscription(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRenewSubscription(subscription, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.EndRenewSubscription(System.IAsyncResult result) {
            return base.Channel.EndRenewSubscription(result);
        }
        
        private System.IAsyncResult OnBeginRenewSubscription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription = ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(inValues[0]));
            return ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).BeginRenewSubscription(subscription, callback, asyncState);
        }
        
        private object[] OnEndRenewSubscription(System.IAsyncResult result) {
            ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel retVal = ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).EndRenewSubscription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRenewSubscriptionCompleted(object state) {
            if ((this.RenewSubscriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RenewSubscriptionCompleted(this, new RenewSubscriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RenewSubscriptionAsync(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription) {
            this.RenewSubscriptionAsync(subscription, null);
        }
        
        public void RenewSubscriptionAsync(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, object userState) {
            if ((this.onBeginRenewSubscriptionDelegate == null)) {
                this.onBeginRenewSubscriptionDelegate = new BeginOperationDelegate(this.OnBeginRenewSubscription);
            }
            if ((this.onEndRenewSubscriptionDelegate == null)) {
                this.onEndRenewSubscriptionDelegate = new EndOperationDelegate(this.OnEndRenewSubscription);
            }
            if ((this.onRenewSubscriptionCompletedDelegate == null)) {
                this.onRenewSubscriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRenewSubscriptionCompleted);
            }
            base.InvokeAsync(this.onBeginRenewSubscriptionDelegate, new object[] {
                        subscription}, this.onEndRenewSubscriptionDelegate, this.onRenewSubscriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.BeginRenewSubscriptionWithStartDate(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, System.DateTime startDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRenewSubscriptionWithStartDate(subscription, startDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.EndRenewSubscriptionWithStartDate(System.IAsyncResult result) {
            return base.Channel.EndRenewSubscriptionWithStartDate(result);
        }
        
        private System.IAsyncResult OnBeginRenewSubscriptionWithStartDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription = ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(inValues[0]));
            System.DateTime startDate = ((System.DateTime)(inValues[1]));
            return ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).BeginRenewSubscriptionWithStartDate(subscription, startDate, callback, asyncState);
        }
        
        private object[] OnEndRenewSubscriptionWithStartDate(System.IAsyncResult result) {
            ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel retVal = ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).EndRenewSubscriptionWithStartDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRenewSubscriptionWithStartDateCompleted(object state) {
            if ((this.RenewSubscriptionWithStartDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RenewSubscriptionWithStartDateCompleted(this, new RenewSubscriptionWithStartDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RenewSubscriptionWithStartDateAsync(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, System.DateTime startDate) {
            this.RenewSubscriptionWithStartDateAsync(subscription, startDate, null);
        }
        
        public void RenewSubscriptionWithStartDateAsync(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, System.DateTime startDate, object userState) {
            if ((this.onBeginRenewSubscriptionWithStartDateDelegate == null)) {
                this.onBeginRenewSubscriptionWithStartDateDelegate = new BeginOperationDelegate(this.OnBeginRenewSubscriptionWithStartDate);
            }
            if ((this.onEndRenewSubscriptionWithStartDateDelegate == null)) {
                this.onEndRenewSubscriptionWithStartDateDelegate = new EndOperationDelegate(this.OnEndRenewSubscriptionWithStartDate);
            }
            if ((this.onRenewSubscriptionWithStartDateCompletedDelegate == null)) {
                this.onRenewSubscriptionWithStartDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRenewSubscriptionWithStartDateCompleted);
            }
            base.InvokeAsync(this.onBeginRenewSubscriptionWithStartDateDelegate, new object[] {
                        subscription,
                        startDate}, this.onEndRenewSubscriptionWithStartDateDelegate, this.onRenewSubscriptionWithStartDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.BeginGetActiveSubscriptins(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetActiveSubscriptins(account, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.EndGetActiveSubscriptins(System.IAsyncResult result) {
            return base.Channel.EndGetActiveSubscriptins(result);
        }
        
        private System.IAsyncResult OnBeginGetActiveSubscriptins(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel)(inValues[0]));
            return ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).BeginGetActiveSubscriptins(account, callback, asyncState);
        }
        
        private object[] OnEndGetActiveSubscriptins(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> retVal = ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).EndGetActiveSubscriptins(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetActiveSubscriptinsCompleted(object state) {
            if ((this.GetActiveSubscriptinsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetActiveSubscriptinsCompleted(this, new GetActiveSubscriptinsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetActiveSubscriptinsAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account) {
            this.GetActiveSubscriptinsAsync(account, null);
        }
        
        public void GetActiveSubscriptinsAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, object userState) {
            if ((this.onBeginGetActiveSubscriptinsDelegate == null)) {
                this.onBeginGetActiveSubscriptinsDelegate = new BeginOperationDelegate(this.OnBeginGetActiveSubscriptins);
            }
            if ((this.onEndGetActiveSubscriptinsDelegate == null)) {
                this.onEndGetActiveSubscriptinsDelegate = new EndOperationDelegate(this.OnEndGetActiveSubscriptins);
            }
            if ((this.onGetActiveSubscriptinsCompletedDelegate == null)) {
                this.onGetActiveSubscriptinsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActiveSubscriptinsCompleted);
            }
            base.InvokeAsync(this.onBeginGetActiveSubscriptinsDelegate, new object[] {
                        account}, this.onEndGetActiveSubscriptinsDelegate, this.onGetActiveSubscriptinsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.BeginGetHistory(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistory(account, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.EndGetHistory(System.IAsyncResult result) {
            return base.Channel.EndGetHistory(result);
        }
        
        private System.IAsyncResult OnBeginGetHistory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel)(inValues[0]));
            return ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).BeginGetHistory(account, callback, asyncState);
        }
        
        private object[] OnEndGetHistory(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> retVal = ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).EndGetHistory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoryCompleted(object state) {
            if ((this.GetHistoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoryCompleted(this, new GetHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoryAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account) {
            this.GetHistoryAsync(account, null);
        }
        
        public void GetHistoryAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, object userState) {
            if ((this.onBeginGetHistoryDelegate == null)) {
                this.onBeginGetHistoryDelegate = new BeginOperationDelegate(this.OnBeginGetHistory);
            }
            if ((this.onEndGetHistoryDelegate == null)) {
                this.onEndGetHistoryDelegate = new EndOperationDelegate(this.OnEndGetHistory);
            }
            if ((this.onGetHistoryCompletedDelegate == null)) {
                this.onGetHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoryCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoryDelegate, new object[] {
                        account}, this.onEndGetHistoryDelegate, this.onGetHistoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.BeginGetHistoryWithLimit(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, int limit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistoryWithLimit(account, limit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.EndGetHistoryWithLimit(System.IAsyncResult result) {
            return base.Channel.EndGetHistoryWithLimit(result);
        }
        
        private System.IAsyncResult OnBeginGetHistoryWithLimit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel)(inValues[0]));
            int limit = ((int)(inValues[1]));
            return ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).BeginGetHistoryWithLimit(account, limit, callback, asyncState);
        }
        
        private object[] OnEndGetHistoryWithLimit(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> retVal = ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).EndGetHistoryWithLimit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoryWithLimitCompleted(object state) {
            if ((this.GetHistoryWithLimitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoryWithLimitCompleted(this, new GetHistoryWithLimitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoryWithLimitAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, int limit) {
            this.GetHistoryWithLimitAsync(account, limit, null);
        }
        
        public void GetHistoryWithLimitAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, int limit, object userState) {
            if ((this.onBeginGetHistoryWithLimitDelegate == null)) {
                this.onBeginGetHistoryWithLimitDelegate = new BeginOperationDelegate(this.OnBeginGetHistoryWithLimit);
            }
            if ((this.onEndGetHistoryWithLimitDelegate == null)) {
                this.onEndGetHistoryWithLimitDelegate = new EndOperationDelegate(this.OnEndGetHistoryWithLimit);
            }
            if ((this.onGetHistoryWithLimitCompletedDelegate == null)) {
                this.onGetHistoryWithLimitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoryWithLimitCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoryWithLimitDelegate, new object[] {
                        account,
                        limit}, this.onEndGetHistoryWithLimitDelegate, this.onGetHistoryWithLimitCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.BeginGetNextHistoryWithLimit(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime before, int limit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNextHistoryWithLimit(account, before, limit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.EndGetNextHistoryWithLimit(System.IAsyncResult result) {
            return base.Channel.EndGetNextHistoryWithLimit(result);
        }
        
        private System.IAsyncResult OnBeginGetNextHistoryWithLimit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel)(inValues[0]));
            System.DateTime before = ((System.DateTime)(inValues[1]));
            int limit = ((int)(inValues[2]));
            return ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).BeginGetNextHistoryWithLimit(account, before, limit, callback, asyncState);
        }
        
        private object[] OnEndGetNextHistoryWithLimit(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> retVal = ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).EndGetNextHistoryWithLimit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNextHistoryWithLimitCompleted(object state) {
            if ((this.GetNextHistoryWithLimitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNextHistoryWithLimitCompleted(this, new GetNextHistoryWithLimitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNextHistoryWithLimitAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime before, int limit) {
            this.GetNextHistoryWithLimitAsync(account, before, limit, null);
        }
        
        public void GetNextHistoryWithLimitAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime before, int limit, object userState) {
            if ((this.onBeginGetNextHistoryWithLimitDelegate == null)) {
                this.onBeginGetNextHistoryWithLimitDelegate = new BeginOperationDelegate(this.OnBeginGetNextHistoryWithLimit);
            }
            if ((this.onEndGetNextHistoryWithLimitDelegate == null)) {
                this.onEndGetNextHistoryWithLimitDelegate = new EndOperationDelegate(this.OnEndGetNextHistoryWithLimit);
            }
            if ((this.onGetNextHistoryWithLimitCompletedDelegate == null)) {
                this.onGetNextHistoryWithLimitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNextHistoryWithLimitCompleted);
            }
            base.InvokeAsync(this.onBeginGetNextHistoryWithLimitDelegate, new object[] {
                        account,
                        before,
                        limit}, this.onEndGetNextHistoryWithLimitDelegate, this.onGetNextHistoryWithLimitCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.BeginGetNewSubscriptions(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime after, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNewSubscriptions(account, after, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.EndGetNewSubscriptions(System.IAsyncResult result) {
            return base.Channel.EndGetNewSubscriptions(result);
        }
        
        private System.IAsyncResult OnBeginGetNewSubscriptions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account = ((ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel)(inValues[0]));
            System.DateTime after = ((System.DateTime)(inValues[1]));
            return ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).BeginGetNewSubscriptions(account, after, callback, asyncState);
        }
        
        private object[] OnEndGetNewSubscriptions(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> retVal = ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).EndGetNewSubscriptions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNewSubscriptionsCompleted(object state) {
            if ((this.GetNewSubscriptionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNewSubscriptionsCompleted(this, new GetNewSubscriptionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNewSubscriptionsAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime after) {
            this.GetNewSubscriptionsAsync(account, after, null);
        }
        
        public void GetNewSubscriptionsAsync(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime after, object userState) {
            if ((this.onBeginGetNewSubscriptionsDelegate == null)) {
                this.onBeginGetNewSubscriptionsDelegate = new BeginOperationDelegate(this.OnBeginGetNewSubscriptions);
            }
            if ((this.onEndGetNewSubscriptionsDelegate == null)) {
                this.onEndGetNewSubscriptionsDelegate = new EndOperationDelegate(this.OnEndGetNewSubscriptions);
            }
            if ((this.onGetNewSubscriptionsCompletedDelegate == null)) {
                this.onGetNewSubscriptionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNewSubscriptionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetNewSubscriptionsDelegate, new object[] {
                        account,
                        after}, this.onEndGetNewSubscriptionsDelegate, this.onGetNewSubscriptionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.BeginValidateSubscription(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, ReBus.Mobile.SubscriptionServiceReference.BusWebServiceModel bus, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateSubscription(subscription, bus, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService.EndValidateSubscription(System.IAsyncResult result) {
            return base.Channel.EndValidateSubscription(result);
        }
        
        private System.IAsyncResult OnBeginValidateSubscription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription = ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(inValues[0]));
            ReBus.Mobile.SubscriptionServiceReference.BusWebServiceModel bus = ((ReBus.Mobile.SubscriptionServiceReference.BusWebServiceModel)(inValues[1]));
            return ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).BeginValidateSubscription(subscription, bus, callback, asyncState);
        }
        
        private object[] OnEndValidateSubscription(System.IAsyncResult result) {
            int retVal = ((ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService)(this)).EndValidateSubscription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateSubscriptionCompleted(object state) {
            if ((this.ValidateSubscriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateSubscriptionCompleted(this, new ValidateSubscriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateSubscriptionAsync(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, ReBus.Mobile.SubscriptionServiceReference.BusWebServiceModel bus) {
            this.ValidateSubscriptionAsync(subscription, bus, null);
        }
        
        public void ValidateSubscriptionAsync(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, ReBus.Mobile.SubscriptionServiceReference.BusWebServiceModel bus, object userState) {
            if ((this.onBeginValidateSubscriptionDelegate == null)) {
                this.onBeginValidateSubscriptionDelegate = new BeginOperationDelegate(this.OnBeginValidateSubscription);
            }
            if ((this.onEndValidateSubscriptionDelegate == null)) {
                this.onEndValidateSubscriptionDelegate = new EndOperationDelegate(this.OnEndValidateSubscription);
            }
            if ((this.onValidateSubscriptionCompletedDelegate == null)) {
                this.onValidateSubscriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateSubscriptionCompleted);
            }
            base.InvokeAsync(this.onBeginValidateSubscriptionDelegate, new object[] {
                        subscription,
                        bus}, this.onEndValidateSubscriptionDelegate, this.onValidateSubscriptionCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService CreateChannel() {
            return new SubscriptionWebServiceClientChannel(this);
        }
        
        private class SubscriptionWebServiceClientChannel : ChannelBase<ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService>, ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService {
            
            public SubscriptionWebServiceClientChannel(System.ServiceModel.ClientBase<ReBus.Mobile.SubscriptionServiceReference.ISubscriptionWebService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginBuySubscriptionForAllLines(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = account;
                System.IAsyncResult _result = base.BeginInvoke("BuySubscriptionForAllLines", _args, callback, asyncState);
                return _result;
            }
            
            public ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel EndBuySubscriptionForAllLines(System.IAsyncResult result) {
                object[] _args = new object[0];
                ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel _result = ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(base.EndInvoke("BuySubscriptionForAllLines", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBuySubscriptionForAllLinesWithStartDate(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime startDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = account;
                _args[1] = startDate;
                System.IAsyncResult _result = base.BeginInvoke("BuySubscriptionForAllLinesWithStartDate", _args, callback, asyncState);
                return _result;
            }
            
            public ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel EndBuySubscriptionForAllLinesWithStartDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel _result = ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(base.EndInvoke("BuySubscriptionForAllLinesWithStartDate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBuySubscription(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> lines, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = account;
                _args[1] = lines;
                System.IAsyncResult _result = base.BeginInvoke("BuySubscription", _args, callback, asyncState);
                return _result;
            }
            
            public ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel EndBuySubscription(System.IAsyncResult result) {
                object[] _args = new object[0];
                ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel _result = ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(base.EndInvoke("BuySubscription", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBuySubscriptionWithStartDate(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.LineWebServiceModel> lines, System.DateTime startDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = account;
                _args[1] = lines;
                _args[2] = startDate;
                System.IAsyncResult _result = base.BeginInvoke("BuySubscriptionWithStartDate", _args, callback, asyncState);
                return _result;
            }
            
            public ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel EndBuySubscriptionWithStartDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel _result = ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(base.EndInvoke("BuySubscriptionWithStartDate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRenewSubscription(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = subscription;
                System.IAsyncResult _result = base.BeginInvoke("RenewSubscription", _args, callback, asyncState);
                return _result;
            }
            
            public ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel EndRenewSubscription(System.IAsyncResult result) {
                object[] _args = new object[0];
                ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel _result = ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(base.EndInvoke("RenewSubscription", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRenewSubscriptionWithStartDate(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, System.DateTime startDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = subscription;
                _args[1] = startDate;
                System.IAsyncResult _result = base.BeginInvoke("RenewSubscriptionWithStartDate", _args, callback, asyncState);
                return _result;
            }
            
            public ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel EndRenewSubscriptionWithStartDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel _result = ((ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel)(base.EndInvoke("RenewSubscriptionWithStartDate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetActiveSubscriptins(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = account;
                System.IAsyncResult _result = base.BeginInvoke("GetActiveSubscriptins", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> EndGetActiveSubscriptins(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> _result = ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel>)(base.EndInvoke("GetActiveSubscriptins", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistory(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = account;
                System.IAsyncResult _result = base.BeginInvoke("GetHistory", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> EndGetHistory(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> _result = ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel>)(base.EndInvoke("GetHistory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistoryWithLimit(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, int limit, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = account;
                _args[1] = limit;
                System.IAsyncResult _result = base.BeginInvoke("GetHistoryWithLimit", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> EndGetHistoryWithLimit(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> _result = ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel>)(base.EndInvoke("GetHistoryWithLimit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNextHistoryWithLimit(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime before, int limit, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = account;
                _args[1] = before;
                _args[2] = limit;
                System.IAsyncResult _result = base.BeginInvoke("GetNextHistoryWithLimit", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> EndGetNextHistoryWithLimit(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> _result = ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel>)(base.EndInvoke("GetNextHistoryWithLimit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNewSubscriptions(ReBus.Mobile.SubscriptionServiceReference.AccountWebServiceModel account, System.DateTime after, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = account;
                _args[1] = after;
                System.IAsyncResult _result = base.BeginInvoke("GetNewSubscriptions", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> EndGetNewSubscriptions(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel> _result = ((System.Collections.ObjectModel.ObservableCollection<ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel>)(base.EndInvoke("GetNewSubscriptions", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginValidateSubscription(ReBus.Mobile.SubscriptionServiceReference.SubscriptionWebServiceModel subscription, ReBus.Mobile.SubscriptionServiceReference.BusWebServiceModel bus, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = subscription;
                _args[1] = bus;
                System.IAsyncResult _result = base.BeginInvoke("ValidateSubscription", _args, callback, asyncState);
                return _result;
            }
            
            public int EndValidateSubscription(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("ValidateSubscription", _args, result)));
                return _result;
            }
        }
    }
}
