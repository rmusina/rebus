//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ReBus.Model
{
    public partial class Line
    {
        #region Primitive Properties
    
        public virtual System.Guid GUID
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Bus> Buses
        {
            get
            {
                if (_buses == null)
                {
                    var newCollection = new FixupCollection<Bus>();
                    newCollection.CollectionChanged += FixupBuses;
                    _buses = newCollection;
                }
                return _buses;
            }
            set
            {
                if (!ReferenceEquals(_buses, value))
                {
                    var previousValue = _buses as FixupCollection<Bus>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBuses;
                    }
                    _buses = value;
                    var newValue = value as FixupCollection<Bus>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBuses;
                    }
                }
            }
        }
        private ICollection<Bus> _buses;
    
        public virtual ICollection<Subscription> Subscriptions
        {
            get
            {
                if (_subscriptions == null)
                {
                    var newCollection = new FixupCollection<Subscription>();
                    newCollection.CollectionChanged += FixupSubscriptions;
                    _subscriptions = newCollection;
                }
                return _subscriptions;
            }
            set
            {
                if (!ReferenceEquals(_subscriptions, value))
                {
                    var previousValue = _subscriptions as FixupCollection<Subscription>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubscriptions;
                    }
                    _subscriptions = value;
                    var newValue = value as FixupCollection<Subscription>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubscriptions;
                    }
                }
            }
        }
        private ICollection<Subscription> _subscriptions;
    
        public virtual ICollection<Station> Stations
        {
            get
            {
                if (_stations == null)
                {
                    var newCollection = new FixupCollection<Station>();
                    newCollection.CollectionChanged += FixupStations;
                    _stations = newCollection;
                }
                return _stations;
            }
            set
            {
                if (!ReferenceEquals(_stations, value))
                {
                    var previousValue = _stations as FixupCollection<Station>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStations;
                    }
                    _stations = value;
                    var newValue = value as FixupCollection<Station>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStations;
                    }
                }
            }
        }
        private ICollection<Station> _stations;

        #endregion
        #region Association Fixup
    
        private void FixupBuses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Bus item in e.NewItems)
                {
                    item.Line = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Bus item in e.OldItems)
                {
                    if (ReferenceEquals(item.Line, this))
                    {
                        item.Line = null;
                    }
                }
            }
        }
    
        private void FixupSubscriptions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Subscription item in e.NewItems)
                {
                    if (!item.Lines.Contains(this))
                    {
                        item.Lines.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Subscription item in e.OldItems)
                {
                    if (item.Lines.Contains(this))
                    {
                        item.Lines.Remove(this);
                    }
                }
            }
        }
    
        private void FixupStations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Station item in e.NewItems)
                {
                    if (!item.Lines.Contains(this))
                    {
                        item.Lines.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Station item in e.OldItems)
                {
                    if (item.Lines.Contains(this))
                    {
                        item.Lines.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
