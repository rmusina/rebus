//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ReBus.Model
{
    public partial class Bus
    {
        #region Primitive Properties
    
        public virtual System.Guid GUID
        {
            get;
            set;
        }
    
        public virtual System.Guid LineGUID
        {
            get { return _lineGUID; }
            set
            {
                if (_lineGUID != value)
                {
                    if (Line != null && Line.GUID != value)
                    {
                        Line = null;
                    }
                    _lineGUID = value;
                }
            }
        }
        private System.Guid _lineGUID;

        #endregion
        #region Navigation Properties
    
        public virtual Line Line
        {
            get { return _line; }
            set
            {
                if (!ReferenceEquals(_line, value))
                {
                    var previousValue = _line;
                    _line = value;
                    FixupLine(previousValue);
                }
            }
        }
        private Line _line;
    
        public virtual ICollection<Ticket> Tickets
        {
            get
            {
                if (_tickets == null)
                {
                    var newCollection = new FixupCollection<Ticket>();
                    newCollection.CollectionChanged += FixupTickets;
                    _tickets = newCollection;
                }
                return _tickets;
            }
            set
            {
                if (!ReferenceEquals(_tickets, value))
                {
                    var previousValue = _tickets as FixupCollection<Ticket>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTickets;
                    }
                    _tickets = value;
                    var newValue = value as FixupCollection<Ticket>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTickets;
                    }
                }
            }
        }
        private ICollection<Ticket> _tickets;

        #endregion
        #region Association Fixup
    
        private void FixupLine(Line previousValue)
        {
            if (previousValue != null && previousValue.Buses.Contains(this))
            {
                previousValue.Buses.Remove(this);
            }
    
            if (Line != null)
            {
                if (!Line.Buses.Contains(this))
                {
                    Line.Buses.Add(this);
                }
                if (LineGUID != Line.GUID)
                {
                    LineGUID = Line.GUID;
                }
            }
        }
    
        private void FixupTickets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Ticket item in e.NewItems)
                {
                    item.Bus = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Ticket item in e.OldItems)
                {
                    if (ReferenceEquals(item.Bus, this))
                    {
                        item.Bus = null;
                    }
                }
            }
        }

        #endregion
    }
}
